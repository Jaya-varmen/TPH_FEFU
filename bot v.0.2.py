import os
import torch
import torch.nn.functional as F
from transformers import pipeline
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext

# –£–∫–∞–∑—ã–≤–∞–µ–º Telegram Token –±–æ—Ç–∞
TOKEN = "—Ç—É—Ç —Ç–æ–∫–µ–Ω"

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
MODEL_PATH = r"–ø—É—Ç—å —Ç—É—Ç"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
classifier = pipeline("text-classification", model=MODEL_PATH, tokenizer=MODEL_PATH, return_all_scores=True)  # return_all_scores=True –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤

# –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–æ–∫
label_map = {
    0: "–≥—Ä—É—Å—Ç–Ω—ã–π",
    1: "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π",
    2: "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
    3: "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def analyze_sentiment(update: Update, context: CallbackContext):
    text = update.message.text  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results = classifier(text)[0]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥–∏—Ç—ã –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é softmax
    probabilities = F.softmax(torch.tensor([res["score"] for res in results]), dim=0).tolist()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    response = f"üìä *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n\nüìù *–¢–µ–∫—Å—Ç:* {text}\n\n"
    for i, res in enumerate(results):
        sentiment = label_map[i]
        probability = probabilities[i] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        response += f"{sentiment}: {probability:.2f}%\n"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–ª–∞—Å—Å
    best_label_index = probabilities.index(max(probabilities))
    best_sentiment = label_map[best_label_index]

    response += f"\nüéØ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:* {best_sentiment}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(response, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–æ–µ —É –Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_sentiment))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
    app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
